name: CI/CD pipeline

on:
  push:
    #branches: [ main ]
    branches: [ feature/test-framework ]
  pull_request:
    branches: [ main ]

jobs:

  ######################################################################
  #### This job is responsible for testing the php application      ####
  ######################################################################
  test-php-app:
    runs-on: ubuntu-latest
    
    steps:
      # Copy repository code into the environment
      - name: Check out repository code
        uses: actions/checkout@v2

      # Check composer version
      - name: Check that composer is installed
        run: composer --version


  ######################################################################
  #### This job is responsible for building and pushing the docker  ####
  #### images to the DockerHub repository                           ####
  ######################################################################
  update-docker-images:
    needs: test-php-app
    runs-on: ubuntu-latest

    steps:
    # Copy repository code into the environment
    - name: Check out repository code
      uses: actions/checkout@v2

    # Test that docker and docker-compose are installed
    - name: Test docker version
      run: |
        docker --version
        docker-compose --version

    # Login to presonal DockerHub account
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Build the updated docker-compose image
    - name: Validate docker-compose image
      run: docker-compose config

    # Build the updated docker-compose image
    - name: Build docker-compose image
      run: docker-compose build

    # Push new docker images to DockerHub
    - name: Push docker images to DockerHub
      run: docker-compose push

  ######################################################################
  #### This job is responsible for the deployment of the web app    ####
  #### on Microsoft Azure by using terraform                        ####
  ######################################################################
  deploy-with-terraform:
    needs: update-docker-images
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Test that terraform is installed
    - name: Test terraform version
      run: terraform -v

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Validate the current terraform configuration
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates a Terraform plan
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    # Adds a comment to the pull request with the results of the format, init and plan steps, only works
    # for a pull request
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Make the workflow fail if the plan is not created correctly     
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # Applies the configuration. This step will only run when a commit is pushed to main
    # this includes successful pull requests
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve





  