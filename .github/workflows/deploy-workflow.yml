name: CI/CD pipeline

on:
  push:
    branches: [ feature/terraform-workflow  ]
  pull_request:
    branches: [ main ]

jobs:

  update-docker-images:
    runs-on: ubuntu-latest
    steps:

    # Copy repository code into the environment
    - name: Check out repository code
      uses: actions/checkout@v2

    # Test that docker and docker-compose are installed
    - name: Test docker version
      run: |
        docker --version
        docker-compose --version

    # Login to presonal DockerHub account
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Build the updated docker-compose image
    - name: Build docker-compose image
      run: docker-compose build

    # Push new docker images to DockerHub
    - name: Push docker images to DockerHub
      run: docker-compose push

  deploy-with-terraform:
    needs: update-docker-images
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

    # Apply new terraform state
    - name: Terraform Apply
      run: terraform apply -auto-approve